#!/usr/bin/env ruby
require_relative '../lib/databsae/database.rb'
#require_relative '../lib/database/backend.rb' # TODO: nach lib/common verschieben ? 
require_relative '../lib/common/common.rb'
require_relative '../lib/indexer/indexer.rb'

# TODO: Den Code übersichtlicher machen.
Thread.abort_on_exception = true

module Indexer
  class Main
    def initialize
      @logger = Common::Logger.new({labels: {tasks: "Aufgaben", tasks_per_second: "Aufgaben/s"}})
      @logger.add_output($stdout, Common::Logger::INFO)
    end
    
    def run
      @logger.log_info "Indexierer wurde gestartet."
      
      begin
        db = Database::Backend.new
      rescue => e
        @logger.log_exception(e)
        @logger.log_warning("Um den Indexierer ausführen zu können, darf die Datenbank nicht von einem anderen Prozess verwendet werden.")
        Kernel.exit
      end
      
      # Temporäres Verzeichnis für den Index überprüfen...
      dir = File.join(File.dirname(__FILE__), "..", "tmp", "index")
      if Dir.exist?(dir)
        raise "Bitte das tmp/index-Verzeichniss entleeren."
      else
        Dir.mkdir(dir)
      end
      
      cache = Indexer::IndexingCache.new(dir)
      Common::WorkerThreads.new(20).run(true) do
        while (key = db.queue_fetch(:index)) != nil
          raw = db.datastore_get(:metadata, key)
          metadata = Common::Database::Metadata.deserialize(raw)
          Task.new(cache, metadata).run
        end
      end
      cache.flush
      
      # Nun müssen die einzelnen Cache Dateien in tmp/index in eine einzelne finale Cache-Datei sortiert werden.
      @logger.log_info "Die Einträge werden nun gemerged..."
      if File.exist?(Config.paths.index)
        File.unlink Config.paths.index
      end
      destination = Common::IndexingFile.new(Config.paths.index).writer
      sources = Dir["#{dir}/*"].each{|path| IndexFile.new(path).reader}
      merger = Indexer::Merger.new(destination, sources)
      merger.merge
      
      @logger.log_info "Generierung des Indexes ist nun abgeschlossen."
    end
  end
end

if __FILE__ == $0
  Indexer::Main.new.run()
end
